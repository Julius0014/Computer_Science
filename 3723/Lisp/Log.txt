gnu015{ubh226}19: clisp
  i i i i i i i       ooooo    o        ooooooo   ooooo   ooooo
  I I I I I I I      8     8   8           8     8     o  8    8
  I  \ `+' /  I      8         8           8     8        8    8
   \  `-+-'  /       8         8           8      ooooo   8oooo
    `-__|__-'        8         8           8           8  8
        |            8     o   8           8     o     8  8
  ------+------       ooooo    8oooooo  ooo8ooo   ooooo   8

Welcome to GNU CLISP 2.49 (2010-07-07) <http://clisp.cons.org/>

Copyright (c) Bruno Haible, Michael Stoll 1992, 1993
Copyright (c) Bruno Haible, Marcus Daniels 1994-1997
Copyright (c) Bruno Haible, Pierpaolo Bernardi, Sam Steingold 1998
Copyright (c) Bruno Haible, Sam Steingold 1999-2000
Copyright (c) Sam Steingold, Bruno Haible 2001-2010

Type :h and hit Enter for context help.

[1]> (load "p2Lisp.txt" :echo T :print T)
;; Loading file p2Lisp.txt ...
;;;REPEAT
;;;	Parameters:
;;;       atm - contains an atom thats going to printed N times
::;
:||
        N - The number of times the atm will be repeated
;;;    Purpose:
;;;     constructs a new list with atm repeated N times.
(defun repeat(atm N)
 (cond( (zerop N) nil)
  ( T (cons  atm (repeat atm (- N 1)))))
 )
REPEAT

;;;Duplicate
;;;	Parameters:
;;;       Lis - a list items to be Duplicate
;;;    Purpose:
;;;    which duplicates each atom of a list
    (defun duplicate(list)
     (setf C (car list))
     (cond((NULL list) NIL)((atom c) (append(repeat c 2) (duplicate (cdr list))))
      ((cons  c (duplicate (cdr list)))))
    )
DUPLICATE

;;; DuplicateN
;;;	Parameters:
;;;       Lis - a list items to be Duplicate
;;;	  N - The number of times the items of the list will be repeated
;;;    Purpose:
;;;    which duplicates N number of times each atom of a list
    (defun duplicateN(list N)
     (setf C (car list))
     (cond((NULL list) NIL)((atom c) (append(repeat c N) (duplicateN (cdr list) N)))
      ((cons  c (duplicateN (cdr list) N))))
    )
DUPLICATEN

;;; DuplicateDeep
;;;	Parameters:
;;;       Lis - a list items to be Duplicate
;;;    Purpose:
;;;    duplicates each atom at any level
    (defun duplicateDeep(list)
     (setf C (car list))
     (cond((NULL list) NIL)((atom c) (append(repeat c 2) (duplicateDeep (cdr list))))
      ((cons  (duplicateDeep c) (duplicateDeep (cdr list)))))
    )
DUPLICATEDEEP

;;; PRINTWOPLIS
;;;    Parameters:
;;;       lis - contains the atoms to be printed
;;;    Purpose:
;;;      Helper function to PRINTWOP, prints out
;;;      each atom of a list without the top level 
;;;      parentheses. 
(defun printWOPLis (lis) 
    (cond    ( (NULL lis) T)
        ( T (PRINC (CAR lis)) (PRINC " ") (printWOPLis (CDR lis)))
    )
)
PRINTWOPLIS


    (defun printWOP (lis)
    (terpri)
     (cond((NULL lis) (PRINC NIL) t)
     
      ( (atom lis)(princ lis)(princ " ") T )
      ((printWOPLis lis ) T)
     )
    )
PRINTWOP


;;; EVALEACH
;;;    Parameters:
;;;       lis - contains the expressions to be evaluated
;;;    Purpose: 
;;;       Uses EVAL to evaluate each expression in the list.
(defun evalEach (lis)
    (cond    ( (NULL (CDR lis)) (EVAL (CAR lis)))
        ( T (EVAL (CAR lis) ) (evalEach (CDR lis)) )
    )
)
EVALEACH

;; Loaded file p2Lisp.txt
T
[2]> (load "p2LispRun.txt" :echo T :print T)
;; Loading file p2LispRun.txt ...
;;; ****** PGM2 RUN ******
(repeat 'A 5)
(A A A A A)


(duplicate ' (A B C))
(A A B B C C)
 
(duplicate ' (GUM (HAS BEEN) CHEWED))
(GUM GUM (HAS BEEN) CHEWED CHEWED)
 

(duplicateN  ' (A B C) 2)
(A A B B C C)
 
(duplicateN  ' (A B C) 3)
(A A A B B B C C C)
 
(duplicateN ' (GUM (HAS BEEN) CHEWED) 2)
(GUM GUM (HAS BEEN) CHEWED CHEWED)
 

(duplicateDeep  ' (A B C) )
(A A B B C C)
 
(duplicateDeep  ' (A (B D) E (F)) )
(A A (B B D D) E E (F F))
 
(duplicateDeep '(A (B (D E) (F G)) (H I)) )
(A A (B B (D D E E) (F F G G)) (H H I I))
 

(printWOP '(A B D))
A B D 
T


(printWOP '(A (B D) E F) )
A (B D) E F 
T


(printWOP NIL)
NIL
T


(printWOP 'Hello)
HELLO 
T


(evalEach '( (setf A 5) (print 'hello) (print 'there) A))
HELLO 
THERE 
5
 

(evalEach '( (setf x 10 ) (setf A '(x y z)) (print A) (setf B (car A)) (set B (+ 5 x)) ))
(X Y Z) 
15

(print B)
X 
X

(print X)
15 
15
T
[3]>